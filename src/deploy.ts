// This scripts generate compose file
import fs from 'node:fs/promises';
import path from 'node:path';
import { ok } from 'node:assert';
import { YDB_GRPC_PORT, YDB_MON_PORT, YDB_IC_PORT, YDB_TENANT, YDB_ENDPOINT } from './constants';
import YDB_CONFIG_FILE from "./configs/ydb.yaml" with { type: "text" };
import PROMETHEUS_CONFIG_FILE from "./configs/prometheus.yaml" with { type: "text" };

// Generate YDB Static Node
let generateStaticNode = () => /** YAML */`
  static-0:
    <<: *ydb-common
    container_name: ydb-static-0
    command:
      - /opt/ydb/bin/ydbd
      - server
      - --grpc-port
      - "${YDB_GRPC_PORT}"
      - --mon-port
      - "${YDB_MON_PORT}"
      - --ic-port
      - "${YDB_IC_PORT}"
      - --yaml-config
      - /opt/ydb/cfg/config.yaml
      - --node
      - static
      - --label
      - deployment=docker
    ports:
      - ${YDB_GRPC_PORT}:${YDB_GRPC_PORT}
      - ${YDB_MON_PORT}:${YDB_MON_PORT}
      - ${YDB_IC_PORT}:${YDB_IC_PORT}
    healthcheck:
      test: bash -c "exec 6<> /dev/tcp/localhost/${YDB_GRPC_PORT}"
      interval: 10s
      timeout: 1s
      retries: 3
      start_period: 30s
    deploy:
      <<: *ydb-deploy

  static-init:
    <<: *ydb-common
    restart: on-failure
    container_name: ydb-static-init
    command:
      - /opt/ydb/bin/ydbd
      - -s
      - ${YDB_ENDPOINT}
      - admin
      - blobstorage
      - config
      - init
      - --yaml-file
      - /opt/ydb/cfg/config.yaml
    depends_on:
      static-0:
        condition: service_healthy

  tenant-init:
    <<: *ydb-common
    restart: on-failure
    container_name: ydb-tenant-init
    command:
      - /opt/ydb/bin/ydbd
      - -s
      - ${YDB_ENDPOINT}
      - admin
      - database
      - ${YDB_TENANT}
      - create
      - ssd:1
    depends_on:
      static-init:
        condition: service_completed_successfully
`.slice(1)

// Generate YDB Dynamic Node
let generateDynamicNode = (idx: number) => /** YAML */`
  dynamic-${idx}:
    <<: *ydb-common
    container_name: ydb-dynamic-${idx}
    command:
      - /opt/ydb/bin/ydbd
      - server
      - --grpc-port
      - "${YDB_GRPC_PORT + idx}"
      - --mon-port
      - "${YDB_MON_PORT + idx}"
      - --ic-port
      - "${YDB_IC_PORT + idx}"
      - --yaml-config
      - /opt/ydb/cfg/config.yaml
      - --tenant
      - ${YDB_TENANT}
      - --node-broker
      - ${YDB_ENDPOINT}
      - --label
      - deployment=docker
    ports:
      - ${YDB_GRPC_PORT + idx}:${YDB_GRPC_PORT + idx}
      - ${YDB_MON_PORT + idx}:${YDB_MON_PORT + idx}
      - ${YDB_IC_PORT + idx}:${YDB_IC_PORT + idx}
    healthcheck:
      test: bash -c "exec 6<> /dev/tcp/localhost/${YDB_GRPC_PORT + idx}"
      interval: 10s
      timeout: 1s
      retries: 3
      start_period: 30s
    depends_on:
      static-0:
        condition: service_healthy
      static-init:
        condition: service_completed_successfully
      tenant-init:
        condition: service_completed_successfully
    deploy:
      <<: *ydb-deploy
`.slice(1)

// Generate Monitoring
let generateMonitoring = () => /** YAML */`
  prometheus:
    image: prom/prometheus
    restart: unless-stopped
    <<: *runtime
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    deploy: &monitoring-deploy
      resources:
        limits:
          cpus: '0.1'
          memory: 1000M
        reservations:
          cpus: '0.001'
          memory: 50M

  prometheus-pushgateway:
    image: prom/pushgateway
    restart: unless-stopped
    <<: *runtime
    ports:
      - "9091:9091"
    network_mode: host
    deploy:
      <<: *monitoring-deploy
`.slice(1)

// Generate Compose
let generateComposeFile = (ydbDatabaseNodeCount: number) => /** YAML */`# Code generated by Github Action; DO NOT EDIT.

x-runtime: &runtime
  platform: linux/amd64
  privileged: true
  network_mode: host

x-node: &ydb-common
  image: cr.yandex/crptqonuodf51kdj7a7d/ydb:24.2.7
  restart: always
  hostname: localhost
  <<: *runtime
  volumes:
    - ./ydb.yaml:/opt/ydb/cfg/config.yaml

x-deploy: &ydb-deploy
  restart_policy:
    condition: any
  resources:
    limits:
      cpus: '1'
      memory: 1000M
    reservations:
      cpus: '0.1'
      memory: 250M

name: ydb

services:
${generateStaticNode()}
${Array.from({ length: ydbDatabaseNodeCount }, (_, i) => i + 1).map(generateDynamicNode).join('\n')}
${generateMonitoring()}
`;

export async function prepareDeployConfigs(tmpDir: string, ydbDatabaseNodeCount: number = 3): Promise<string> {
  // Write configs
  await fs.writeFile(path.join(tmpDir, 'ydb.yaml'), YDB_CONFIG_FILE);
  await fs.writeFile(path.join(tmpDir, 'prometheus.yml'), PROMETHEUS_CONFIG_FILE);

  // Write compose file
  await fs.writeFile(path.join(tmpDir, 'compose.yaml'), generateComposeFile(ydbDatabaseNodeCount));

  return path.join(tmpDir, 'compose.yaml')
}

if (import.meta.main) {
  const tempDirectory = process.env['RUNNER_TEMP'] || ''
  ok(tempDirectory, 'Expected RUNNER_TEMP to be defined')

  prepareDeployConfigs(tempDirectory)
}
