name: Workload and errors sheduler concurrent workflow

on:
  workflow_call:
    inputs:
      language:
        description: "SDK language or language+variant"
        required: true
        type: string
      time_between_phases:
        description: "Time to wait between phases (sleep command)"
        default: "10s"
        type: string
    secrets:
      KUBE_CONFIG:
        required: true

concurrency:
  group: ${{ github.ref }}-${{ inputs.language }}-test

jobs:
  run-workload:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        # need this owing to local action usage

      - run: mkdir $HOME/.kube; echo "${{ secrets.KUBE_CONFIG }}" | base64 -d > $HOME/.kube/config

      - name: Create ${{ inputs.language }} test run yaml
        run: |
          cat > ${{ inputs.language }}-workload.yaml <<EOF
          apiVersion: batch/v1
          kind: Job
          metadata:
            name: ${{ inputs.language }}-workload
          spec:
            ttlSecondsAfterFinished: 120
            backoffLimit: 0
            template:
              metadata:
                name: ${{ inputs.language }}-workload
              spec:
                containers:
                - name: ${{ inputs.language }}-workload
                  image: cr.yandex/crpho4srfnemeb9mi57a/${{ inputs.language }}:latest
                  args:
                    - "grpc://database-sample-grpc:2135"
                    - "/root/database-sample"
                restartPolicy: Never
                imagePullSecrets:
                  - name: innerregistry
          EOF

      - name: Check builded yaml
        run: cat ${{ inputs.language }}-workload.yaml

      - name: Run ${{ inputs.language }} workload
        run: kubectl apply -f ${{ inputs.language }}-workload.yaml

      - name: Wait for workload to end
        id: workload-wait
        run: kubectl wait --for=condition=complete --timeout 5m job/${{ inputs.language }}-workload

      - name: Get build logs on failure
        if: failure() && steps.workload-wait.outcome == 'failure'
        run: kubectl logs job/${{ inputs.language }}-build

  run-errors-sheduler:
    runs-on: ubuntu-latest
    steps:
      - run: mkdir $HOME/.kube; echo "${{ secrets.KUBE_CONFIG }}" | base64 -d > $HOME/.kube/config

      - name: Get existing pods
        run: kubectl get pods

      - run: sleep ${{ inputs.time_between_phases }}

      - name: Get DB host's internal IP
        run: |
          export MARTYR_IP=`kubectl get pods database-sample-0 -o=jsonpath='{.status.podIP}'`
          export GRAFANA_POD=`kubectl get pods -l "app.kubernetes.io/name=grafana" -o jsonpath="{.items[0].metadata.name}"`
          echo "MARTYR_IP=$MARTYR_IP" >> $GITHUB_ENV
          echo "GRAFANA_POD=$GRAFANA_POD" >> $GITHUB_ENV

      - name: Show DB host's internal IP and grafana pod name
        run: echo ${MARTYR_IP} ${GRAFANA_POD}

      - name: Annotate freeze in grafana
        uses: ./.github/actions/grafana-annotate
        with:
          pod: ${GRAFANA_POD}
          text: "Freeze tablet"
          tags: '["freeze", "tablet"]'

      - name: Freeze tablet
        run: >
          kubectl run -it --image=busybox --rm tablet-freezer --restart=Never -- sh -c "wget -q -O-
          '${MARTYR_IP}:8765/tablets/app?TabletID=72057594037968897&node=1&page=SetFreeze&freeze=1'"

      - run: sleep ${{ inputs.time_between_phases }}

      - name: Annotate unfreeze in grafana
        uses: ./.github/actions/grafana-annotate
        with:
          pod: ${GRAFANA_POD}
          text: "Unfreeze tablet"
          tags: '["unfreeze", "tablet"]'

      - name: Unfreeze tablet
        run: >
          kubectl run -it --image=busybox --rm tablet-freezer --restart=Never -- sh -c "wget -q -O-
          '${MARTYR_IP}:8765/tablets/app?TabletID=72057594037968897&node=1&page=SetFreeze&freeze=0'"

      - run: sleep ${{ inputs.time_between_phases }}

      - name: Annotate deletion of the database pod in grafana
        uses: ./.github/actions/grafana-annotate
        with:
          pod: ${GRAFANA_POD}
          text: "Delete database pod"
          tags: '["kube", "pod", "kubectl-delete"]'

      - name: Delete database pod (it will automatically restart)
        run: kubectl delete pod database-sample-1

      - run: sleep ${{ inputs.time_between_phases }}

      - name: Annotate hard shutdown of the database pod in grafana
        uses: ./.github/actions/grafana-annotate
        with:
          pod: ${GRAFANA_POD}
          text: "Hard shutdown database pod"
          tags: '["kube", "pod", "kubectl-delete-force"]'

      - name: Hard shutdown database pod (it will automatically restart)
        run: kubectl delete pod database-sample-1 --force=true --grace-period=0

      - run: sleep ${{ inputs.time_between_phases }}

      - name: Annotate kill of the database pod from inside in grafana
        uses: ./.github/actions/grafana-annotate
        with:
          pod: ${GRAFANA_POD}
          text: "Kill pod from inside"
          tags: '["kube", "pod", "kubectl-delete-force"]'

      - name: Kill pod from inside
        run: kubectl exec -it database-sample-0 -- /bin/bash -c "kill -2 1 && echo 'process killed'";

      - run: sleep ${{ inputs.time_between_phases }}
